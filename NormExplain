Your task is to implement a new validation rule that:

Works with Business Activity API.

Adds logic for setting ruleExecutionMode based on the enableRatingValidation flag.

Should validate rules during different phases of processing:

First pass: before offer page.

Second pass: on offer page.

Uses dynamic table validations only.

Calls the CVS BAK/validate endpoint.

New rule should behave similar to NORM2240









âœ… Key Implementation Points
From Requirement:
DTO Already Has ruleExecutionMode â€” no new DTO needed.

Set Rule Execution Mode:

If enableRatingValidation = false, set mode: VALIDATE_QUESTIONS_VALUES

If true, set mode: RATS & VALIDATE_QUESTIONS_VALUES

Add a New Rule â€” similar to NORM2240.

Validation uses Business Activity API via CVS Validation Endpoint.

Include both enableRatingValidation and ruleExecutionMode in payload.

ðŸ’¡ Proposed New Norm Class: NORMXXXX (Example Name: NormCVSValidationRule)
Below is a Java implementation based on the NORM2240 pattern and requirements:

java
Copy
Edit
@RuleDefinition(
    id = "NORMXXXX",
    businessRuleRef = "MSG123456",
    englishTitle = "Validation: CVS Rule for Business Activity API",
    errorCodeMessage = "CVS001",
    priority = 100,
    target = {Target.CONTRACT},
    group = RuleGroup.VALIDATION,
    ruleType = RuleType.NORMALIZATION,
    transactionType = TransactionType.MODIFICATION,
    contractMode = ContractMode.CONVERT_TO_POLICY,
    contractTypes = {RequestFor.CONTRACT_COMMERCIAL_LINES_2},
    ruleExecutionMode = RuleExecutionMode.VALIDATE_QUESTIONS_VALUES
)
@RuleFactory(factory = RuleFactoryType.STRING)
public class NormCVSValidationRule extends AbstractValidationRule<CommercialContractVersion> {

    @Autowired
    private BusinessActivityApi businessActivityApi;

    @Override
    public IStatus executeRule(BusinessValidationContext pContext, ICommercialContractVersion pContractVersion)
        throws RuleExecutionException {
        
        log.info("Executing NormCVSValidationRule...");

        // Fetch input flags from context
        boolean enableRatingValidation = pContext.getPayload().get("enableRatingValidation", Boolean.class);
        RuleExecutionMode executionMode = enableRatingValidation
            ? RuleExecutionMode.RATS_AND_VALIDATE_QUESTIONS_VALUES
            : RuleExecutionMode.VALIDATE_QUESTIONS_VALUES;

        // Set ruleExecutionMode into payload
        pContext.getPayload().put("ruleExecutionMode", executionMode.name());

        try {
            // Call Business Activity API CVS/validate endpoint
            businessActivityApi.callValidationEndpoint(pContext.getPayload());

            return Status.OK;
        } catch (Exception ex) {
            log.error("CVS Validation failed", ex);
            throw new RuleExecutionException("Error during CVS Validation", ex);
        }
    }

    @Override
    public boolean isExecutionNeeded(BusinessValidationContext pContext, CommercialContractVersion pContractVersion) {
        return true; // Always run this rule for now
    }
}
ðŸ§ª Test Considerations
Unit Test: Ensure both flag values (true, false) set expected ruleExecutionMode.

Integration Test: Simulate payload going through Business Activity API endpoint.

Validate both:

Payload structure.

Mode switch logic.

Reference JIRA: https://intactfinancialgrp.atlassian.net/browse/ILVS-59

ðŸ“¦ Dependencies/Beans You Might Need to Wire
java
Copy
Edit
@Bean
public BusinessActivityApi businessActivityApi() {
    return new BusinessActivityApi(); // Or via Feign/WebClient if it's remote
}
Would you like:

A corresponding unit test class?

Feign/WebClient setup for businessActivityApi.callValidationEndpoint()?
